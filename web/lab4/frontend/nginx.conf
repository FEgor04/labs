
user nginx;
events {
  worker_connections   1000;
}
http {
  # what times to include
  include       /etc/nginx/mime.types;
  # what is the default one
  default_type  application/octet-stream;

  # Sets the path, format, and configuration for a buffered log write
  log_format compression '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $upstream_addr '
    '"$http_referer" "$http_user_agent"';

  map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
  }
  server {
    # listen on port 80
    listen 443 ssl http2 default_server;
    listen [::]:443 ssl http2 default_server;

    ssl_certificate /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/private/server.key;

    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
    ssl_ecdh_curve secp384r1;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable preloading HSTS for now.  You can use the commented out header line that includes
    # the "preload" directive if you understand the implications.
    #add_header Strict-Transport-Security "max-age=63072000; includeSubdomains; preload";
    add_header Strict-Transport-Security "max-age=63072000; includeSubdomains";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    # save logs here
    access_log /var/log/nginx/access.log compression;

    gzip on;
    gzip_types text/html application/javascript application/json text/css;

    # where the root here
    root /usr/share/nginx/html;
    # what file to server as index
    index index.html;


    location / {
      try_files $uri $uri/ $uri.html /index.html;
    }

    location ~* \.(?:css|js|jpg|svg)$ {
      expires 30d;
      add_header Cache-Control "public";
    }

    location ~* \.(?:json)$ {
      expires 1d;
      add_header Cache-Control "public";
    }

    location /api {
      proxy_pass https://localhost:8443/api;
      proxy_ssl_trusted_certificate /etc/ssl/certs/wildfly.crt;
    }

  }
}
